/**
* @Authors Abhijit Kane
* Main validator file
*/
 
var color   = require('cli-color'),
	program = require('commander'),
	path    = require('path'),
	request = require('unirest'),
	fs      = require('fs'),
	JSV = require("JSV").JSV;

var config = loadJSONfile('./sample.globals');
var global_schema = require('./json-schemas/globals.schema.json');
var env_schema = require('./json-schemas/environment.schema.json');
var collection_schema = require('./json-schemas/collection.schema.json');


function loadJSONfile (filename, encoding) {
	try {
		if (typeof (encoding) == 'undefined') encoding = 'utf8';
		var contents = fs.readFileSync(filename, encoding);
		return JSON.parse(contents);
	} catch (err) {
		throw err;	
	}
}

function parseArguments() {
	program
	  .version('0.0.0')
	  .usage('[option]')
	  .option('-c, --collection [file]', 'Validate the input file against the collection schema', null)
      .option('-e, --environment [file]', 'Validate the input file against the environment schema', null)
      .option('-g, --globals [file]', 'Validate the input file against the globals schema', null);

	program.on('--help', function() {
	  console.log('  Validates files generated by Postman');
	  console.log('');
	  console.log('  Examples:');
	  console.log('');
	  console.log('    validator -c POSTMAN_COLLECTION.json');
	  console.log('    validator -e POSTMAN_ENVIRONMENT.json');
      console.log('    validator -g POSTMAN_GLOBALS.json');
	  console.log('');
	});

	program.parse(process.argv);

	if(process.collection) {
		if(process.environment || process.globals) {
			onlyOneValidator();
		}

		return validate(collection_schema,process.collection);
	}
	else if(process.environment) {
		if(process.globals) {
			onlyOneValidator();
		}
		return validate(env_schema,process.collection);
	}
	else if(process.globals) {
		return validate(global_schema,process.collection);
	}
	else {
		printError("At least one option must be specified. Use --help to see the list of options");
	}
}

function validate(schema, input) {
	input = loadJSONfile(input);
	var env = JSV.createEnvironment();
	var report = env.validate(input, schema);
	if(report.errors.length) {
		console.log("Error");
		return report.errors;
	}

}

function onlyOneValidator() {
	printError("Only one type of validation can be used at one time");
}

function printError(str) {
	process.stdout.write(str);
	process.exit(1);
}

function main() {
	return parseArguments();
}

main();
